File "LeiA_Statverif.pv", line 146, character 9 - line 146, character 14:
Warning: identifier newsk rebound
Process:
(
    {1}!
    {2}lock senderE;
    {3}lock senderC;
    {4}read senderE as eid: bitstring;
    {5}let v_56: bitstring = catch-fail((if (eid = zero) then one else (if (eid = one) then two else (if (eid = three) then zero else fail-any)))) in
    {6}let v_57: sessionkey = catch-fail(sessionKeyGenBS(keyid,v_56)) in
    {7}let (eidpp: bitstring,sk: sessionkey) = (if not-caught-fail(v_56) then (if not-caught-fail(v_57) then (v_56,v_57) else fail-any) else fail-any) in
    {8}senderE := eidpp;
    {9}senderC := zero;
    {10}let v_58: bitstring = catch-fail((if (eidpp = zero) then one else (if (eidpp = one) then two else (if (eidpp = three) then zero else fail-any)))) in
    {11}let v_59: sessionkey = catch-fail(sessionKeyGenBS(keyid,v_58)) in
    {12}let v_60: bitstring = catch-fail((if not-caught-fail(v_58) then (if not-caught-fail(v_59) then (v_58,v_59) else fail-any) else fail-any)) in
    {13}let v_61: bitstring = catch-fail((if (zero = zero) then one else (if (zero = one) then two else (if (zero = three) then zero else fail-any)))) in
    {14}let (cid1: bitstring,eid1: bitstring,newsk: sessionkey) = (if (zero = three) then (if (not-caught-fail(v_60) && success?(is-true(success?(1-proj-2-tuple(v_60))))) then (zero,1-proj-2-tuple(v_60),2-proj-2-tuple(v_60)) else fail-any) else (if not-caught-fail(v_61) then (v_61,eidpp,sk) else fail-any)) in
    {15}senderC := cid1;
    {16}senderE := eid1;
    {17}new msg: bitstring;
    {18}let mac: bitstring = MAC(newsk,cid1,msg) in
    {19}out(c, (cid1,msg));
    {20}out(c, (cid1,mac));
    {21}in(c, authfail: bool);
    {22}if (authfail = true) then
    {23}let v_62: bitstring = catch-fail((if (eid1 = zero) then one else (if (eid1 = one) then two else (if (eid1 = three) then zero else fail-any)))) in
    {24}let v_63: sessionkey = catch-fail(sessionKeyGenBS(keyid,v_62)) in
    {25}let v_64: bitstring = catch-fail((if not-caught-fail(v_62) then (if not-caught-fail(v_63) then (v_62,v_63) else fail-any) else fail-any)) in
    {26}let v_65: bitstring = catch-fail((if (cid1 = zero) then one else (if (cid1 = one) then two else (if (cid1 = three) then zero else fail-any)))) in
    {27}let (cid2: bitstring,eid2: bitstring,newsk2: sessionkey) = (if (cid1 = three) then (if (not-caught-fail(v_64) && success?(is-true(success?(1-proj-2-tuple(v_64))))) then (zero,1-proj-2-tuple(v_64),2-proj-2-tuple(v_64)) else fail-any) else (if not-caught-fail(v_65) then (v_65,eid1,newsk) else fail-any)) in
    {28}senderC := cid2;
    {29}senderE := eid2;
    {30}out(c, (cid2,eid2));
    {31}let verifmac: bitstring = MAC(newsk2,cid2,eid2) in
        {32}out(c, (cid2,verifmac))
    else
        {33}event authSuccess(sk,mac)
) | (
    {34}!
    {35}lock receiverE;
    {36}lock receiverC;
    {37}read receiverE as eid_66: bitstring;
    {38}let v_67: bitstring = catch-fail((if (eid_66 = zero) then one else (if (eid_66 = one) then two else (if (eid_66 = three) then zero else fail-any)))) in
    {39}let v_68: sessionkey = catch-fail(sessionKeyGenBS(keyid,v_67)) in
    {40}let (eidpp_69: bitstring,sk_70: sessionkey) = (if not-caught-fail(v_67) then (if not-caught-fail(v_68) then (v_67,v_68) else fail-any) else fail-any) in
    {41}receiverE := eidpp_69;
    {42}receiverC := zero;
    {43}let v_71: bitstring = catch-fail((if (eidpp_69 = zero) then one else (if (eidpp_69 = one) then two else (if (eidpp_69 = three) then zero else fail-any)))) in
    {44}let v_72: sessionkey = catch-fail(sessionKeyGenBS(keyid,v_71)) in
    {45}let v_73: bitstring = catch-fail((if not-caught-fail(v_71) then (if not-caught-fail(v_72) then (v_71,v_72) else fail-any) else fail-any)) in
    {46}let v_74: bitstring = catch-fail((if (zero = zero) then one else (if (zero = one) then two else (if (zero = three) then zero else fail-any)))) in
    {47}let (cid1_75: bitstring,eid1_76: bitstring,newsk_77: sessionkey) = (if (zero = three) then (if (not-caught-fail(v_73) && success?(is-true(success?(1-proj-2-tuple(v_73))))) then (zero,1-proj-2-tuple(v_73),2-proj-2-tuple(v_73)) else fail-any) else (if not-caught-fail(v_74) then (v_74,eidpp_69,sk_70) else fail-any)) in
    {48}receiverC := cid1_75;
    {49}receiverE := eid1_76;
    {50}in(c, (scid: bitstring,msg_78: bitstring));
    {51}in(c, (=scid,mac_79: bitstring));
    {52}let maccheck: bitstring = MAC(newsk_77,cid1_75,msg_78) in
    {53}if (maccheck = mac_79) then
        {54}event macChecked(newsk_77,maccheck)
    else
        {55}out(c, true);
        {56}in(c, (scid1: bitstring,seid: bitstring));
        {57}let cid2_80: bitstring = (if (cid1_75 = zero) then scid1 else (if ((cid1_75 = one) && ((scid1 = two) || (scid1 = three))) then scid1 else (if ((cid1_75 = two) && (scid1 = three)) then scid1 else cid1_75))) in
        {58}let eid2_81: bitstring = (if (eid1_76 = zero) then scid1 else (if ((eid1_76 = one) && ((scid1 = two) || (scid1 = three))) then scid1 else (if ((eid1_76 = two) && (scid1 = three)) then scid1 else eid1_76))) in
        {59}in(c, (=cid2_80,verifmac_82: bitstring));
        {60}let newsk_83: sessionkey = sessionKeyGen(keyid,cid2_80) in
        {61}let maccheck2: bitstring = MAC(sk_70,cid2_80,eid2_81) in
        {62}if (maccheck2 = verifmac_82) then
        {63}out(c, keyid)
)

-- Query event(authSuccess(sk_84,mac_85)) ==> event(macChecked(sk_84,mac_85))
nounif attacker(cells(*senderC_118,*senderE_119,*receiverC_120,*receiverE_121),v_122)/-5000
Completing...
200 rules inserted. The rule base contains 129 rules. 20 rules in the queue.
400 rules inserted. The rule base contains 240 rules. 205 rules in the queue.
600 rules inserted. The rule base contains 407 rules. 300 rules in the queue.
800 rules inserted. The rule base contains 573 rules. 561 rules in the queue.
1000 rules inserted. The rule base contains 497 rules. 525 rules in the queue.
1200 rules inserted. The rule base contains 513 rules. 566 rules in the queue.
1400 rules inserted. The rule base contains 710 rules. 971 rules in the queue.
1600 rules inserted. The rule base contains 892 rules. 1757 rules in the queue.
1800 rules inserted. The rule base contains 950 rules. 1915 rules in the queue.
2000 rules inserted. The rule base contains 756 rules. 1496 rules in the queue.
2200 rules inserted. The rule base contains 733 rules. 1413 rules in the queue.
2400 rules inserted. The rule base contains 781 rules. 1389 rules in the queue.
2600 rules inserted. The rule base contains 815 rules. 1541 rules in the queue.
2800 rules inserted. The rule base contains 1011 rules. 2039 rules in the queue.
3000 rules inserted. The rule base contains 1209 rules. 2745 rules in the queue.
3200 rules inserted. The rule base contains 1247 rules. 3636 rules in the queue.
3400 rules inserted. The rule base contains 1441 rules. 4097 rules in the queue.
3600 rules inserted. The rule base contains 1479 rules. 4229 rules in the queue.
3800 rules inserted. The rule base contains 1654 rules. 4829 rules in the queue.
4000 rules inserted. The rule base contains 1588 rules. 4697 rules in the queue.
4200 rules inserted. The rule base contains 1788 rules. 5192 rules in the queue.
4400 rules inserted. The rule base contains 1664 rules. 4595 rules in the queue.
4600 rules inserted. The rule base contains 1592 rules. 3795 rules in the queue.
4800 rules inserted. The rule base contains 1785 rules. 4233 rules in the queue.
5000 rules inserted. The rule base contains 1769 rules. 4367 rules in the queue.
5200 rules inserted. The rule base contains 1957 rules. 4693 rules in the queue.
5400 rules inserted. The rule base contains 1985 rules. 4647 rules in the queue.
5600 rules inserted. The rule base contains 2021 rules. 4719 rules in the queue.
5800 rules inserted. The rule base contains 2180 rules. 5162 rules in the queue.
6000 rules inserted. The rule base contains 2250 rules. 5448 rules in the queue.
6200 rules inserted. The rule base contains 2050 rules. 5048 rules in the queue.
6400 rules inserted. The rule base contains 2230 rules. 5408 rules in the queue.
6600 rules inserted. The rule base contains 2428 rules. 5917 rules in the queue.
6800 rules inserted. The rule base contains 2628 rules. 7363 rules in the queue.
7000 rules inserted. The rule base contains 2828 rules. 8298 rules in the queue.
7200 rules inserted. The rule base contains 2812 rules. 8266 rules in the queue.
7400 rules inserted. The rule base contains 2842 rules. 8282 rules in the queue.
7600 rules inserted. The rule base contains 2850 rules. 8506 rules in the queue.
7800 rules inserted. The rule base contains 2906 rules. 8618 rules in the queue.
8000 rules inserted. The rule base contains 3103 rules. 9291 rules in the queue.
8200 rules inserted. The rule base contains 3141 rules. 9443 rules in the queue.
8400 rules inserted. The rule base contains 3053 rules. 9379 rules in the queue.
8600 rules inserted. The rule base contains 3115 rules. 9503 rules in the queue.
8800 rules inserted. The rule base contains 3315 rules. 9903 rules in the queue.
9000 rules inserted. The rule base contains 3352 rules. 9953 rules in the queue.
9200 rules inserted. The rule base contains 3430 rules. 10265 rules in the queue.
9400 rules inserted. The rule base contains 3378 rules. 10309 rules in the queue.
9600 rules inserted. The rule base contains 3178 rules. 9909 rules in the queue.
9800 rules inserted. The rule base contains 3139 rules. 9269 rules in the queue.
10000 rules inserted. The rule base contains 3074 rules. 8537 rules in the queue.
10200 rules inserted. The rule base contains 2993 rules. 7796 rules in the queue.
10400 rules inserted. The rule base contains 3076 rules. 7982 rules in the queue.
10600 rules inserted. The rule base contains 3006 rules. 7944 rules in the queue.
10800 rules inserted. The rule base contains 3206 rules. 8346 rules in the queue.
11000 rules inserted. The rule base contains 3326 rules. 9130 rules in the queue.
11200 rules inserted. The rule base contains 3382 rules. 9354 rules in the queue.
11400 rules inserted. The rule base contains 3262 rules. 9194 rules in the queue.
11600 rules inserted. The rule base contains 3070 rules. 8677 rules in the queue.
11800 rules inserted. The rule base contains 3032 rules. 8525 rules in the queue.
12000 rules inserted. The rule base contains 3184 rules. 9133 rules in the queue.
12200 rules inserted. The rule base contains 3058 rules. 8955 rules in the queue.
12400 rules inserted. The rule base contains 2864 rules. 8571 rules in the queue.
12600 rules inserted. The rule base contains 2983 rules. 8718 rules in the queue.
12800 rules inserted. The rule base contains 2841 rules. 8150 rules in the queue.
13000 rules inserted. The rule base contains 2957 rules. 8614 rules in the queue.
13200 rules inserted. The rule base contains 3157 rules. 9414 rules in the queue.
