Process:
{1}out(c, key)

-- Query not attacker(key[])
Add-rule entered for rule:
attacker(cells,false)
Added rule to rule queue.
Add-rule entered for rule:
attacker(cells,true)
Added rule to rule queue.
Add-rule entered for rule:
seq(cells,cells)
Added rule to rule queue.
Add-rule entered for rule:
mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Added rule to rule queue.
Add-rule entered for rule:
attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
Added rule to rule queue.
Add-rule entered for rule:
attacker(cells,fail-any)
Added rule to rule queue.
Add-rule entered for rule:
attacker(cells,one[])
Added rule to rule queue.
Add-rule entered for rule:
attacker(cells,zero[])
Added rule to rule queue.
Add-rule entered for rule:
attacker(cells,c[])
Added rule to rule queue.
Add-rule entered for rule:
equal(v_39,v_39)
Added rule to rule queue.
Add-rule entered for rule:
attacker(cells,new-name[!att = v_40])
Added rule to rule queue.
Add-rule entered for rule:
attacker(cells,key[])
Added rule to rule queue.
selection_fun_weight applied to rule
attacker(cells,false)
Selecting -1
selection_fun_weight applied to rule
attacker(cells,true)
Selecting -1
selection_fun_weight applied to rule
seq(cells,cells)
Selecting -1
selection_fun_weight applied to rule
mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Selecting 0
selection_fun_weight applied to rule
attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
Selecting 0
selection_fun_weight applied to rule
attacker(cells,fail-any)
Selecting -1
selection_fun_weight applied to rule
attacker(cells,one[])
Selecting -1
selection_fun_weight applied to rule
attacker(cells,zero[])
Selecting -1
selection_fun_weight applied to rule
attacker(cells,c[])
Selecting -1
selection_fun_weight applied to rule
equal(v_39,v_39)
Selecting -1
selection_fun_weight applied to rule
attacker(cells,new-name[!att = v_40])
Selecting -1
selection_fun_weight applied to rule
attacker(cells,key[])
Selecting -1
Rule base after normalisation
attacker(cells,false)
attacker(cells,true)
seq(cells,cells)
mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
attacker(cells,fail-any)
attacker(cells,one[])
attacker(cells,zero[])
attacker(cells,c[])
equal(v_39,v_39)
attacker(cells,new-name[!att = v_40])
attacker(cells,key[])
Completing...
COMPOSING attacker(cells,false)
selection_fun_weight applied to rule
attacker(cells,false)
Selecting -1
selection_fun_weight applied to rule
attacker(cells,false) -> dummy
Selecting 0

#rule_base_ns = 1, rule_base_sel = 0, #rules in queue = 11
COMPOSING attacker(cells,true)
selection_fun_weight applied to rule
attacker(cells,true)
Selecting -1
selection_fun_weight applied to rule
attacker(cells,true) -> dummy
Selecting 0

#rule_base_ns = 2, rule_base_sel = 0, #rules in queue = 10
COMPOSING seq(cells,cells)
selection_fun_weight applied to rule
seq(cells,cells)
Selecting -1
selection_fun_weight applied to rule
seq(cells,cells) -> dummy
always_select_weight applied to seq(cells,cells)Selecting 0

#rule_base_ns = 3, rule_base_sel = 0, #rules in queue = 9
COMPOSING mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
selection_fun_weight applied to rule
mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Selecting 0
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
BACKWARDS WITH attacker(cells,false)

#rule_base_ns = 3, rule_base_sel = 1, #rules in queue = 8
COMPOSING attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
selection_fun_weight applied to rule
attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
Selecting 0
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
Result of composition is
attacker(cells,v_42) -> mess(cells,true,v_42)
Add-rule entered for rule:
attacker(cells,v_42) -> mess(cells,true,v_42)
Added rule to rule queue.
BACKWARDS WITH attacker(cells,false)
Result of composition is
attacker(cells,v_43) -> mess(cells,false,v_43)
Add-rule entered for rule:
attacker(cells,v_43) -> mess(cells,false,v_43)
Added rule to rule queue.

#rule_base_ns = 3, rule_base_sel = 2, #rules in queue = 9
COMPOSING attacker(cells,fail-any)
selection_fun_weight applied to rule
attacker(cells,fail-any)
Selecting -1
selection_fun_weight applied to rule
attacker(cells,fail-any) -> dummy
Selecting 0
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)

#rule_base_ns = 4, rule_base_sel = 2, #rules in queue = 8
COMPOSING attacker(cells,one[])
selection_fun_weight applied to rule
attacker(cells,one[])
Selecting -1
selection_fun_weight applied to rule
attacker(cells,one[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
Result of composition is
attacker(cells,v_44) -> mess(cells,one[],v_44)
Add-rule entered for rule:
attacker(cells,v_44) -> mess(cells,one[],v_44)
Added rule to rule queue.
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)

#rule_base_ns = 5, rule_base_sel = 2, #rules in queue = 8
COMPOSING attacker(cells,zero[])
selection_fun_weight applied to rule
attacker(cells,zero[])
Selecting -1
selection_fun_weight applied to rule
attacker(cells,zero[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
Result of composition is
attacker(cells,v_45) -> mess(cells,zero[],v_45)
Add-rule entered for rule:
attacker(cells,v_45) -> mess(cells,zero[],v_45)
Added rule to rule queue.
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)

#rule_base_ns = 6, rule_base_sel = 2, #rules in queue = 8
COMPOSING attacker(cells,c[])
selection_fun_weight applied to rule
attacker(cells,c[])
Selecting -1
selection_fun_weight applied to rule
attacker(cells,c[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
Result of composition is
attacker(cells,v_46) -> mess(cells,c[],v_46)
Add-rule entered for rule:
attacker(cells,v_46) -> mess(cells,c[],v_46)
Added rule to rule queue.
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)

#rule_base_ns = 7, rule_base_sel = 2, #rules in queue = 8
COMPOSING equal(v_39,v_39)
selection_fun_weight applied to rule
equal(v_39,v_39)
Selecting -1
selection_fun_weight applied to rule
equal(v_39,v_39) -> dummy
Selecting 0
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)

#rule_base_ns = 8, rule_base_sel = 2, #rules in queue = 7
COMPOSING attacker(cells,new-name[!att = v_40])
selection_fun_weight applied to rule
attacker(cells,new-name[!att = v_40])
Selecting -1
selection_fun_weight applied to rule
attacker(cells,new-name[!att = v_40]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
Result of composition is
attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
Add-rule entered for rule:
attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
Added rule to rule queue.
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)

#rule_base_ns = 9, rule_base_sel = 2, #rules in queue = 7
COMPOSING attacker(cells,key[])
selection_fun_weight applied to rule
attacker(cells,key[])
Selecting -1
selection_fun_weight applied to rule
attacker(cells,key[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
Result of composition is
attacker(cells,v_49) -> mess(cells,key[],v_49)
Add-rule entered for rule:
attacker(cells,v_49) -> mess(cells,key[],v_49)
Added rule to rule queue.
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)

#rule_base_ns = 10, rule_base_sel = 2, #rules in queue = 7
COMPOSING attacker(cells,v_42) -> mess(cells,true,v_42)
selection_fun_weight applied to rule
attacker(cells,v_42) -> mess(cells,true,v_42)
Selecting 0
BACKWARDS WITH attacker(cells,key[])
Result of composition is
mess(cells,true,key[])
Add-rule entered for rule:
mess(cells,true,key[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,new-name[!att = v_40])
Result of composition is
mess(cells,true,new-name[!att = v_50])
Add-rule entered for rule:
mess(cells,true,new-name[!att = v_50])
Added rule to rule queue.
BACKWARDS WITH equal(v_39,v_39)
BACKWARDS WITH attacker(cells,c[])
Result of composition is
mess(cells,true,c[])
Add-rule entered for rule:
mess(cells,true,c[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,zero[])
Result of composition is
mess(cells,true,zero[])
Add-rule entered for rule:
mess(cells,true,zero[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,one[])
Result of composition is
mess(cells,true,one[])
Add-rule entered for rule:
mess(cells,true,one[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,fail-any)
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
Result of composition is
mess(cells,true,true)
Add-rule entered for rule:
mess(cells,true,true)
Added rule to rule queue.
BACKWARDS WITH attacker(cells,false)
Result of composition is
mess(cells,true,false)
Add-rule entered for rule:
mess(cells,true,false)
Added rule to rule queue.

#rule_base_ns = 10, rule_base_sel = 3, #rules in queue = 13
COMPOSING attacker(cells,v_43) -> mess(cells,false,v_43)
selection_fun_weight applied to rule
attacker(cells,v_43) -> mess(cells,false,v_43)
Selecting 0
BACKWARDS WITH attacker(cells,key[])
Result of composition is
mess(cells,false,key[])
Add-rule entered for rule:
mess(cells,false,key[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,new-name[!att = v_40])
Result of composition is
mess(cells,false,new-name[!att = v_51])
Add-rule entered for rule:
mess(cells,false,new-name[!att = v_51])
Added rule to rule queue.
BACKWARDS WITH equal(v_39,v_39)
BACKWARDS WITH attacker(cells,c[])
Result of composition is
mess(cells,false,c[])
Add-rule entered for rule:
mess(cells,false,c[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,zero[])
Result of composition is
mess(cells,false,zero[])
Add-rule entered for rule:
mess(cells,false,zero[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,one[])
Result of composition is
mess(cells,false,one[])
Add-rule entered for rule:
mess(cells,false,one[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,fail-any)
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
Result of composition is
mess(cells,false,true)
Add-rule entered for rule:
mess(cells,false,true)
Added rule to rule queue.
BACKWARDS WITH attacker(cells,false)
Result of composition is
mess(cells,false,false)
Add-rule entered for rule:
mess(cells,false,false)
Added rule to rule queue.

#rule_base_ns = 10, rule_base_sel = 4, #rules in queue = 19
COMPOSING attacker(cells,v_44) -> mess(cells,one[],v_44)
selection_fun_weight applied to rule
attacker(cells,v_44) -> mess(cells,one[],v_44)
Selecting 0
BACKWARDS WITH attacker(cells,key[])
Result of composition is
mess(cells,one[],key[])
Add-rule entered for rule:
mess(cells,one[],key[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,new-name[!att = v_40])
Result of composition is
mess(cells,one[],new-name[!att = v_52])
Add-rule entered for rule:
mess(cells,one[],new-name[!att = v_52])
Added rule to rule queue.
BACKWARDS WITH equal(v_39,v_39)
BACKWARDS WITH attacker(cells,c[])
Result of composition is
mess(cells,one[],c[])
Add-rule entered for rule:
mess(cells,one[],c[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,zero[])
Result of composition is
mess(cells,one[],zero[])
Add-rule entered for rule:
mess(cells,one[],zero[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,one[])
Result of composition is
mess(cells,one[],one[])
Add-rule entered for rule:
mess(cells,one[],one[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,fail-any)
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
Result of composition is
mess(cells,one[],true)
Add-rule entered for rule:
mess(cells,one[],true)
Added rule to rule queue.
BACKWARDS WITH attacker(cells,false)
Result of composition is
mess(cells,one[],false)
Add-rule entered for rule:
mess(cells,one[],false)
Added rule to rule queue.

#rule_base_ns = 10, rule_base_sel = 5, #rules in queue = 25
COMPOSING attacker(cells,v_45) -> mess(cells,zero[],v_45)
selection_fun_weight applied to rule
attacker(cells,v_45) -> mess(cells,zero[],v_45)
Selecting 0
BACKWARDS WITH attacker(cells,key[])
Result of composition is
mess(cells,zero[],key[])
Add-rule entered for rule:
mess(cells,zero[],key[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,new-name[!att = v_40])
Result of composition is
mess(cells,zero[],new-name[!att = v_53])
Add-rule entered for rule:
mess(cells,zero[],new-name[!att = v_53])
Added rule to rule queue.
BACKWARDS WITH equal(v_39,v_39)
BACKWARDS WITH attacker(cells,c[])
Result of composition is
mess(cells,zero[],c[])
Add-rule entered for rule:
mess(cells,zero[],c[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,zero[])
Result of composition is
mess(cells,zero[],zero[])
Add-rule entered for rule:
mess(cells,zero[],zero[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,one[])
Result of composition is
mess(cells,zero[],one[])
Add-rule entered for rule:
mess(cells,zero[],one[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,fail-any)
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
Result of composition is
mess(cells,zero[],true)
Add-rule entered for rule:
mess(cells,zero[],true)
Added rule to rule queue.
BACKWARDS WITH attacker(cells,false)
Result of composition is
mess(cells,zero[],false)
Add-rule entered for rule:
mess(cells,zero[],false)
Added rule to rule queue.

#rule_base_ns = 10, rule_base_sel = 6, #rules in queue = 31
COMPOSING attacker(cells,v_46) -> mess(cells,c[],v_46)
selection_fun_weight applied to rule
attacker(cells,v_46) -> mess(cells,c[],v_46)
Selecting 0
BACKWARDS WITH attacker(cells,key[])
Result of composition is
mess(cells,c[],key[])
Add-rule entered for rule:
mess(cells,c[],key[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,new-name[!att = v_40])
Result of composition is
mess(cells,c[],new-name[!att = v_54])
Add-rule entered for rule:
mess(cells,c[],new-name[!att = v_54])
Added rule to rule queue.
BACKWARDS WITH equal(v_39,v_39)
BACKWARDS WITH attacker(cells,c[])
Result of composition is
mess(cells,c[],c[])
Add-rule entered for rule:
mess(cells,c[],c[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,zero[])
Result of composition is
mess(cells,c[],zero[])
Add-rule entered for rule:
mess(cells,c[],zero[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,one[])
Result of composition is
mess(cells,c[],one[])
Add-rule entered for rule:
mess(cells,c[],one[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,fail-any)
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
Result of composition is
mess(cells,c[],true)
Add-rule entered for rule:
mess(cells,c[],true)
Added rule to rule queue.
BACKWARDS WITH attacker(cells,false)
Result of composition is
mess(cells,c[],false)
Add-rule entered for rule:
mess(cells,c[],false)
Added rule to rule queue.

#rule_base_ns = 10, rule_base_sel = 7, #rules in queue = 37
COMPOSING attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
selection_fun_weight applied to rule
attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
Selecting 0
BACKWARDS WITH attacker(cells,key[])
Result of composition is
mess(cells,new-name[!att = v_55],key[])
Add-rule entered for rule:
mess(cells,new-name[!att = v_55],key[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,new-name[!att = v_40])
Result of composition is
mess(cells,new-name[!att = v_56],new-name[!att = v_57])
Add-rule entered for rule:
mess(cells,new-name[!att = v_56],new-name[!att = v_57])
Added rule to rule queue.
BACKWARDS WITH equal(v_39,v_39)
BACKWARDS WITH attacker(cells,c[])
Result of composition is
mess(cells,new-name[!att = v_58],c[])
Add-rule entered for rule:
mess(cells,new-name[!att = v_58],c[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,zero[])
Result of composition is
mess(cells,new-name[!att = v_59],zero[])
Add-rule entered for rule:
mess(cells,new-name[!att = v_59],zero[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,one[])
Result of composition is
mess(cells,new-name[!att = v_60],one[])
Add-rule entered for rule:
mess(cells,new-name[!att = v_60],one[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,fail-any)
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
Result of composition is
mess(cells,new-name[!att = v_61],true)
Add-rule entered for rule:
mess(cells,new-name[!att = v_61],true)
Added rule to rule queue.
BACKWARDS WITH attacker(cells,false)
Result of composition is
mess(cells,new-name[!att = v_62],false)
Add-rule entered for rule:
mess(cells,new-name[!att = v_62],false)
Added rule to rule queue.

#rule_base_ns = 10, rule_base_sel = 8, #rules in queue = 43
COMPOSING attacker(cells,v_49) -> mess(cells,key[],v_49)
selection_fun_weight applied to rule
attacker(cells,v_49) -> mess(cells,key[],v_49)
Selecting 0
BACKWARDS WITH attacker(cells,key[])
Result of composition is
mess(cells,key[],key[])
Add-rule entered for rule:
mess(cells,key[],key[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,new-name[!att = v_40])
Result of composition is
mess(cells,key[],new-name[!att = v_63])
Add-rule entered for rule:
mess(cells,key[],new-name[!att = v_63])
Added rule to rule queue.
BACKWARDS WITH equal(v_39,v_39)
BACKWARDS WITH attacker(cells,c[])
Result of composition is
mess(cells,key[],c[])
Add-rule entered for rule:
mess(cells,key[],c[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,zero[])
Result of composition is
mess(cells,key[],zero[])
Add-rule entered for rule:
mess(cells,key[],zero[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,one[])
Result of composition is
mess(cells,key[],one[])
Add-rule entered for rule:
mess(cells,key[],one[])
Added rule to rule queue.
BACKWARDS WITH attacker(cells,fail-any)
BACKWARDS WITH seq(cells,cells)
BACKWARDS WITH attacker(cells,true)
Result of composition is
mess(cells,key[],true)
Add-rule entered for rule:
mess(cells,key[],true)
Added rule to rule queue.
BACKWARDS WITH attacker(cells,false)
Result of composition is
mess(cells,key[],false)
Add-rule entered for rule:
mess(cells,key[],false)
Added rule to rule queue.

#rule_base_ns = 10, rule_base_sel = 9, #rules in queue = 49
COMPOSING mess(cells,true,key[])
selection_fun_weight applied to rule
mess(cells,true,key[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,true,key[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,true) -> attacker(cells,key[])
Superfluous rule found: attacker(cells,key[])
 is subsumed by attacker(cells,key[])
Eliminated rule 
attacker(cells,key[])

#rule_base_ns = 11, rule_base_sel = 9, #rules in queue = 48
COMPOSING mess(cells,true,new-name[!att = v_50])
selection_fun_weight applied to rule
mess(cells,true,new-name[!att = v_50])
Selecting -1
selection_fun_weight applied to rule
mess(cells,true,new-name[!att = v_50]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,true) -> attacker(cells,new-name[!att = v_64])
Superfluous rule found: attacker(cells,new-name[!att = v_64])
 is subsumed by attacker(cells,new-name[!att = v_40])
Eliminated rule 
attacker(cells,new-name[!att = v_64])

#rule_base_ns = 12, rule_base_sel = 9, #rules in queue = 47
COMPOSING mess(cells,true,c[])
selection_fun_weight applied to rule
mess(cells,true,c[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,true,c[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,true) -> attacker(cells,c[])
Superfluous rule found: attacker(cells,c[])
 is subsumed by attacker(cells,c[])
Eliminated rule 
attacker(cells,c[])

#rule_base_ns = 13, rule_base_sel = 9, #rules in queue = 46
COMPOSING mess(cells,true,zero[])
selection_fun_weight applied to rule
mess(cells,true,zero[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,true,zero[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,true) -> attacker(cells,zero[])
Superfluous rule found: attacker(cells,zero[])
 is subsumed by attacker(cells,zero[])
Eliminated rule 
attacker(cells,zero[])

#rule_base_ns = 14, rule_base_sel = 9, #rules in queue = 45
COMPOSING mess(cells,true,one[])
selection_fun_weight applied to rule
mess(cells,true,one[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,true,one[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,true) -> attacker(cells,one[])
Superfluous rule found: attacker(cells,one[])
 is subsumed by attacker(cells,one[])
Eliminated rule 
attacker(cells,one[])

#rule_base_ns = 15, rule_base_sel = 9, #rules in queue = 44
COMPOSING mess(cells,true,true)
selection_fun_weight applied to rule
mess(cells,true,true)
Selecting -1
selection_fun_weight applied to rule
mess(cells,true,true) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,true) -> attacker(cells,true)

#rule_base_ns = 16, rule_base_sel = 9, #rules in queue = 43
COMPOSING mess(cells,true,false)
selection_fun_weight applied to rule
mess(cells,true,false)
Selecting -1
selection_fun_weight applied to rule
mess(cells,true,false) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,true) -> attacker(cells,false)

#rule_base_ns = 17, rule_base_sel = 9, #rules in queue = 42
COMPOSING mess(cells,false,key[])
selection_fun_weight applied to rule
mess(cells,false,key[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,false,key[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,false) -> attacker(cells,key[])
Superfluous rule found: attacker(cells,key[])
 is subsumed by attacker(cells,key[])
Eliminated rule 
attacker(cells,key[])

#rule_base_ns = 18, rule_base_sel = 9, #rules in queue = 41
COMPOSING mess(cells,false,new-name[!att = v_51])
selection_fun_weight applied to rule
mess(cells,false,new-name[!att = v_51])
Selecting -1
selection_fun_weight applied to rule
mess(cells,false,new-name[!att = v_51]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,false) -> attacker(cells,new-name[!att = v_65])
Superfluous rule found: attacker(cells,new-name[!att = v_65])
 is subsumed by attacker(cells,new-name[!att = v_40])
Eliminated rule 
attacker(cells,new-name[!att = v_65])

#rule_base_ns = 19, rule_base_sel = 9, #rules in queue = 40
COMPOSING mess(cells,false,c[])
selection_fun_weight applied to rule
mess(cells,false,c[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,false,c[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,false) -> attacker(cells,c[])
Superfluous rule found: attacker(cells,c[])
 is subsumed by attacker(cells,c[])
Eliminated rule 
attacker(cells,c[])

#rule_base_ns = 20, rule_base_sel = 9, #rules in queue = 39
COMPOSING mess(cells,false,zero[])
selection_fun_weight applied to rule
mess(cells,false,zero[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,false,zero[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,false) -> attacker(cells,zero[])
Superfluous rule found: attacker(cells,zero[])
 is subsumed by attacker(cells,zero[])
Eliminated rule 
attacker(cells,zero[])

#rule_base_ns = 21, rule_base_sel = 9, #rules in queue = 38
COMPOSING mess(cells,false,one[])
selection_fun_weight applied to rule
mess(cells,false,one[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,false,one[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,false) -> attacker(cells,one[])
Superfluous rule found: attacker(cells,one[])
 is subsumed by attacker(cells,one[])
Eliminated rule 
attacker(cells,one[])

#rule_base_ns = 22, rule_base_sel = 9, #rules in queue = 37
COMPOSING mess(cells,false,true)
selection_fun_weight applied to rule
mess(cells,false,true)
Selecting -1
selection_fun_weight applied to rule
mess(cells,false,true) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,false) -> attacker(cells,true)

#rule_base_ns = 23, rule_base_sel = 9, #rules in queue = 36
COMPOSING mess(cells,false,false)
selection_fun_weight applied to rule
mess(cells,false,false)
Selecting -1
selection_fun_weight applied to rule
mess(cells,false,false) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,false) -> attacker(cells,false)

#rule_base_ns = 24, rule_base_sel = 9, #rules in queue = 35
COMPOSING mess(cells,one[],key[])
selection_fun_weight applied to rule
mess(cells,one[],key[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,one[],key[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,one[]) -> attacker(cells,key[])
Superfluous rule found: attacker(cells,one[]) -> attacker(cells,key[])
 is subsumed by attacker(cells,key[])
Eliminated rule 
attacker(cells,one[]) -> attacker(cells,key[])

#rule_base_ns = 25, rule_base_sel = 9, #rules in queue = 34
COMPOSING mess(cells,one[],new-name[!att = v_52])
selection_fun_weight applied to rule
mess(cells,one[],new-name[!att = v_52])
Selecting -1
selection_fun_weight applied to rule
mess(cells,one[],new-name[!att = v_52]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,one[]) -> attacker(cells,new-name[!att = v_66])
Superfluous rule found: attacker(cells,one[]) -> attacker(cells,new-name[!att = v_66])
 is subsumed by attacker(cells,new-name[!att = v_40])
Eliminated rule 
attacker(cells,one[]) -> attacker(cells,new-name[!att = v_66])

#rule_base_ns = 26, rule_base_sel = 9, #rules in queue = 33
COMPOSING mess(cells,one[],c[])
selection_fun_weight applied to rule
mess(cells,one[],c[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,one[],c[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,one[]) -> attacker(cells,c[])
Superfluous rule found: attacker(cells,one[]) -> attacker(cells,c[])
 is subsumed by attacker(cells,c[])
Eliminated rule 
attacker(cells,one[]) -> attacker(cells,c[])

#rule_base_ns = 27, rule_base_sel = 9, #rules in queue = 32
COMPOSING mess(cells,one[],zero[])
selection_fun_weight applied to rule
mess(cells,one[],zero[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,one[],zero[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,one[]) -> attacker(cells,zero[])
Superfluous rule found: attacker(cells,one[]) -> attacker(cells,zero[])
 is subsumed by attacker(cells,zero[])
Eliminated rule 
attacker(cells,one[]) -> attacker(cells,zero[])

#rule_base_ns = 28, rule_base_sel = 9, #rules in queue = 31
COMPOSING mess(cells,one[],one[])
selection_fun_weight applied to rule
mess(cells,one[],one[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,one[],one[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,one[]) -> attacker(cells,one[])

#rule_base_ns = 29, rule_base_sel = 9, #rules in queue = 30
COMPOSING mess(cells,one[],true)
selection_fun_weight applied to rule
mess(cells,one[],true)
Selecting -1
selection_fun_weight applied to rule
mess(cells,one[],true) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,one[]) -> attacker(cells,true)

#rule_base_ns = 30, rule_base_sel = 9, #rules in queue = 29
COMPOSING mess(cells,one[],false)
selection_fun_weight applied to rule
mess(cells,one[],false)
Selecting -1
selection_fun_weight applied to rule
mess(cells,one[],false) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,one[]) -> attacker(cells,false)

#rule_base_ns = 31, rule_base_sel = 9, #rules in queue = 28
COMPOSING mess(cells,zero[],key[])
selection_fun_weight applied to rule
mess(cells,zero[],key[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,zero[],key[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,zero[]) -> attacker(cells,key[])
Superfluous rule found: attacker(cells,zero[]) -> attacker(cells,key[])
 is subsumed by attacker(cells,key[])
Eliminated rule 
attacker(cells,zero[]) -> attacker(cells,key[])

#rule_base_ns = 32, rule_base_sel = 9, #rules in queue = 27
COMPOSING mess(cells,zero[],new-name[!att = v_53])
selection_fun_weight applied to rule
mess(cells,zero[],new-name[!att = v_53])
Selecting -1
selection_fun_weight applied to rule
mess(cells,zero[],new-name[!att = v_53]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,zero[]) -> attacker(cells,new-name[!att = v_67])
Superfluous rule found: attacker(cells,zero[]) -> attacker(cells,new-name[!att = v_67])
 is subsumed by attacker(cells,new-name[!att = v_40])
Eliminated rule 
attacker(cells,zero[]) -> attacker(cells,new-name[!att = v_67])

#rule_base_ns = 33, rule_base_sel = 9, #rules in queue = 26
COMPOSING mess(cells,zero[],c[])
selection_fun_weight applied to rule
mess(cells,zero[],c[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,zero[],c[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,zero[]) -> attacker(cells,c[])
Superfluous rule found: attacker(cells,zero[]) -> attacker(cells,c[])
 is subsumed by attacker(cells,c[])
Eliminated rule 
attacker(cells,zero[]) -> attacker(cells,c[])

#rule_base_ns = 34, rule_base_sel = 9, #rules in queue = 25
COMPOSING mess(cells,zero[],zero[])
selection_fun_weight applied to rule
mess(cells,zero[],zero[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,zero[],zero[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,zero[]) -> attacker(cells,zero[])

#rule_base_ns = 35, rule_base_sel = 9, #rules in queue = 24
COMPOSING mess(cells,zero[],one[])
selection_fun_weight applied to rule
mess(cells,zero[],one[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,zero[],one[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,zero[]) -> attacker(cells,one[])
Superfluous rule found: attacker(cells,zero[]) -> attacker(cells,one[])
 is subsumed by attacker(cells,one[])
Eliminated rule 
attacker(cells,zero[]) -> attacker(cells,one[])

#rule_base_ns = 36, rule_base_sel = 9, #rules in queue = 23
COMPOSING mess(cells,zero[],true)
selection_fun_weight applied to rule
mess(cells,zero[],true)
Selecting -1
selection_fun_weight applied to rule
mess(cells,zero[],true) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,zero[]) -> attacker(cells,true)

#rule_base_ns = 37, rule_base_sel = 9, #rules in queue = 22
COMPOSING mess(cells,zero[],false)
selection_fun_weight applied to rule
mess(cells,zero[],false)
Selecting -1
selection_fun_weight applied to rule
mess(cells,zero[],false) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,zero[]) -> attacker(cells,false)

#rule_base_ns = 38, rule_base_sel = 9, #rules in queue = 21
COMPOSING mess(cells,c[],key[])
selection_fun_weight applied to rule
mess(cells,c[],key[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,c[],key[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,c[]) -> attacker(cells,key[])
Superfluous rule found: attacker(cells,c[]) -> attacker(cells,key[])
 is subsumed by attacker(cells,key[])
Eliminated rule 
attacker(cells,c[]) -> attacker(cells,key[])

#rule_base_ns = 39, rule_base_sel = 9, #rules in queue = 20
COMPOSING mess(cells,c[],new-name[!att = v_54])
selection_fun_weight applied to rule
mess(cells,c[],new-name[!att = v_54])
Selecting -1
selection_fun_weight applied to rule
mess(cells,c[],new-name[!att = v_54]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,c[]) -> attacker(cells,new-name[!att = v_68])
Superfluous rule found: attacker(cells,c[]) -> attacker(cells,new-name[!att = v_68])
 is subsumed by attacker(cells,new-name[!att = v_40])
Eliminated rule 
attacker(cells,c[]) -> attacker(cells,new-name[!att = v_68])

#rule_base_ns = 40, rule_base_sel = 9, #rules in queue = 19
COMPOSING mess(cells,c[],c[])
selection_fun_weight applied to rule
mess(cells,c[],c[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,c[],c[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,c[]) -> attacker(cells,c[])

#rule_base_ns = 41, rule_base_sel = 9, #rules in queue = 18
COMPOSING mess(cells,c[],zero[])
selection_fun_weight applied to rule
mess(cells,c[],zero[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,c[],zero[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,c[]) -> attacker(cells,zero[])
Superfluous rule found: attacker(cells,c[]) -> attacker(cells,zero[])
 is subsumed by attacker(cells,zero[])
Eliminated rule 
attacker(cells,c[]) -> attacker(cells,zero[])

#rule_base_ns = 42, rule_base_sel = 9, #rules in queue = 17
COMPOSING mess(cells,c[],one[])
selection_fun_weight applied to rule
mess(cells,c[],one[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,c[],one[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,c[]) -> attacker(cells,one[])
Superfluous rule found: attacker(cells,c[]) -> attacker(cells,one[])
 is subsumed by attacker(cells,one[])
Eliminated rule 
attacker(cells,c[]) -> attacker(cells,one[])

#rule_base_ns = 43, rule_base_sel = 9, #rules in queue = 16
COMPOSING mess(cells,c[],true)
selection_fun_weight applied to rule
mess(cells,c[],true)
Selecting -1
selection_fun_weight applied to rule
mess(cells,c[],true) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,c[]) -> attacker(cells,true)

#rule_base_ns = 44, rule_base_sel = 9, #rules in queue = 15
COMPOSING mess(cells,c[],false)
selection_fun_weight applied to rule
mess(cells,c[],false)
Selecting -1
selection_fun_weight applied to rule
mess(cells,c[],false) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,c[]) -> attacker(cells,false)

#rule_base_ns = 45, rule_base_sel = 9, #rules in queue = 14
COMPOSING mess(cells,new-name[!att = v_55],key[])
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_55],key[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_55],key[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,new-name[!att = v_69]) -> attacker(cells,key[])
Superfluous rule found: attacker(cells,new-name[!att = v_69]) -> attacker(cells,key[])
 is subsumed by attacker(cells,key[])
Eliminated rule 
attacker(cells,new-name[!att = v_69]) -> attacker(cells,key[])

#rule_base_ns = 46, rule_base_sel = 9, #rules in queue = 13
COMPOSING mess(cells,new-name[!att = v_56],new-name[!att = v_57])
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_56],new-name[!att = v_57])
Selecting -1
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_56],new-name[!att = v_57]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,new-name[!att = v_70]) -> attacker(cells,new-name[!att = v_71])
Superfluous rule found: attacker(cells,new-name[!att = v_70]) -> attacker(cells,new-name[!att = v_71])
 is subsumed by attacker(cells,new-name[!att = v_40])
Eliminated rule 
attacker(cells,new-name[!att = v_70]) -> attacker(cells,new-name[!att = v_71])

#rule_base_ns = 47, rule_base_sel = 9, #rules in queue = 12
COMPOSING mess(cells,new-name[!att = v_58],c[])
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_58],c[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_58],c[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,new-name[!att = v_72]) -> attacker(cells,c[])
Superfluous rule found: attacker(cells,new-name[!att = v_72]) -> attacker(cells,c[])
 is subsumed by attacker(cells,c[])
Eliminated rule 
attacker(cells,new-name[!att = v_72]) -> attacker(cells,c[])

#rule_base_ns = 48, rule_base_sel = 9, #rules in queue = 11
COMPOSING mess(cells,new-name[!att = v_59],zero[])
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_59],zero[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_59],zero[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,new-name[!att = v_73]) -> attacker(cells,zero[])
Superfluous rule found: attacker(cells,new-name[!att = v_73]) -> attacker(cells,zero[])
 is subsumed by attacker(cells,zero[])
Eliminated rule 
attacker(cells,new-name[!att = v_73]) -> attacker(cells,zero[])

#rule_base_ns = 49, rule_base_sel = 9, #rules in queue = 10
COMPOSING mess(cells,new-name[!att = v_60],one[])
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_60],one[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_60],one[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,new-name[!att = v_74]) -> attacker(cells,one[])
Superfluous rule found: attacker(cells,new-name[!att = v_74]) -> attacker(cells,one[])
 is subsumed by attacker(cells,one[])
Eliminated rule 
attacker(cells,new-name[!att = v_74]) -> attacker(cells,one[])

#rule_base_ns = 50, rule_base_sel = 9, #rules in queue = 9
COMPOSING mess(cells,new-name[!att = v_61],true)
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_61],true)
Selecting -1
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_61],true) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,new-name[!att = v_75]) -> attacker(cells,true)

#rule_base_ns = 51, rule_base_sel = 9, #rules in queue = 8
COMPOSING mess(cells,new-name[!att = v_62],false)
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_62],false)
Selecting -1
selection_fun_weight applied to rule
mess(cells,new-name[!att = v_62],false) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,new-name[!att = v_76]) -> attacker(cells,false)

#rule_base_ns = 52, rule_base_sel = 9, #rules in queue = 7
COMPOSING mess(cells,key[],key[])
selection_fun_weight applied to rule
mess(cells,key[],key[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,key[],key[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,key[]) -> attacker(cells,key[])

#rule_base_ns = 53, rule_base_sel = 9, #rules in queue = 6
COMPOSING mess(cells,key[],new-name[!att = v_63])
selection_fun_weight applied to rule
mess(cells,key[],new-name[!att = v_63])
Selecting -1
selection_fun_weight applied to rule
mess(cells,key[],new-name[!att = v_63]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,key[]) -> attacker(cells,new-name[!att = v_77])
Superfluous rule found: attacker(cells,key[]) -> attacker(cells,new-name[!att = v_77])
 is subsumed by attacker(cells,new-name[!att = v_40])
Eliminated rule 
attacker(cells,key[]) -> attacker(cells,new-name[!att = v_77])

#rule_base_ns = 54, rule_base_sel = 9, #rules in queue = 5
COMPOSING mess(cells,key[],c[])
selection_fun_weight applied to rule
mess(cells,key[],c[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,key[],c[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,key[]) -> attacker(cells,c[])
Superfluous rule found: attacker(cells,key[]) -> attacker(cells,c[])
 is subsumed by attacker(cells,c[])
Eliminated rule 
attacker(cells,key[]) -> attacker(cells,c[])

#rule_base_ns = 55, rule_base_sel = 9, #rules in queue = 4
COMPOSING mess(cells,key[],zero[])
selection_fun_weight applied to rule
mess(cells,key[],zero[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,key[],zero[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,key[]) -> attacker(cells,zero[])
Superfluous rule found: attacker(cells,key[]) -> attacker(cells,zero[])
 is subsumed by attacker(cells,zero[])
Eliminated rule 
attacker(cells,key[]) -> attacker(cells,zero[])

#rule_base_ns = 56, rule_base_sel = 9, #rules in queue = 3
COMPOSING mess(cells,key[],one[])
selection_fun_weight applied to rule
mess(cells,key[],one[])
Selecting -1
selection_fun_weight applied to rule
mess(cells,key[],one[]) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,key[]) -> attacker(cells,one[])
Superfluous rule found: attacker(cells,key[]) -> attacker(cells,one[])
 is subsumed by attacker(cells,one[])
Eliminated rule 
attacker(cells,key[]) -> attacker(cells,one[])

#rule_base_ns = 57, rule_base_sel = 9, #rules in queue = 2
COMPOSING mess(cells,key[],true)
selection_fun_weight applied to rule
mess(cells,key[],true)
Selecting -1
selection_fun_weight applied to rule
mess(cells,key[],true) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,key[]) -> attacker(cells,true)

#rule_base_ns = 58, rule_base_sel = 9, #rules in queue = 1
COMPOSING mess(cells,key[],false)
selection_fun_weight applied to rule
mess(cells,key[],false)
Selecting -1
selection_fun_weight applied to rule
mess(cells,key[],false) -> dummy
Selecting 0
WITH (0) attacker(cells,v_49) -> mess(cells,key[],v_49)
WITH (0) attacker(cells,v_47) -> mess(cells,new-name[!att = v_48],v_47)
WITH (0) attacker(cells,v_46) -> mess(cells,c[],v_46)
WITH (0) attacker(cells,v_45) -> mess(cells,zero[],v_45)
WITH (0) attacker(cells,v_44) -> mess(cells,one[],v_44)
WITH (0) attacker(cells,v_43) -> mess(cells,false,v_43)
WITH (0) attacker(cells,v_42) -> mess(cells,true,v_42)
WITH (0) attacker(cells,v_37) && attacker(cells,v_36) -> mess(cells,v_37,v_36)
WITH (0) mess(cells,v_35,v_34) && attacker(cells,v_35) -> attacker(cells,v_34)
Result of composition is
attacker(cells,key[]) -> attacker(cells,false)

#rule_base_ns = 59, rule_base_sel = 9, #rules in queue = 0
Starting query not attacker(cells,key[])
selection_fun_weight applied to rule
attacker(cells,key[]) -> dummy
Selecting 0
Result of composition is
attacker(cells,key[])
selection_fun_weight applied to rule
dummy
Selecting -1
selection_fun_weight applied to rule
attacker(cells,key[]) -> dummy
Selecting 0
1 clauses before subsumption modulo eq.
attacker(cells,key[])
goal reachable: attacker(cells,key[])

1. Called display_clause_explain

The message key[] may be sent to the attacker at output {1}.
attacker(cells,key[]).


Could not find a trace corresponding to this derivation.
RESULT not attacker(cells,key[]) cannot be proved.
